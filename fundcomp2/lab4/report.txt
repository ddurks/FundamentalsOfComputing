//David Durkin
//Fund Comp II
//Blackjack Lab 4 Lab report

	From the user perspective, when the program begins, the user is presented with the 
values of the cards that they have been dealt. 1-10 for numbered cards, 10 for face cards, and 11 for an ace. Then, they are given two options, enter 1 to "hit" or enter anything else to "stand." If they choose to hit, they are presented with their new card, and then the computer prompts them again as to what they want to do. This could go on until the user chooses to stand. Then the program prints out the cards that the user has, and the cards that the dealer drew, declares who won, and updates the dealer wins and player wins categories. Following this, the user is prompted as to whether they want to play again in the sam way that they were prompted before.

	From the programmer's perspective, this program is based off of a CardDeck class, and 
a mainBlackjack.cpp file which drives the program. The CardDeck class consists of a constructor CardDeck(), an overloaded constructor CardDeck(int n), a destructor ~CardDeck, an overloaded cout operator friend function, member funcitons: getSize(), shuffle(), inOrder(), printReverse(), deal(), and a private member deque which holds the cards. The default constructor initializes the deck to 52 cards automatically, while the overloaded creates a deck of n specified cards. The destructor clears the member deque. The getSize function returns the size, the shuffle function shuffles the deck, the inOrder function checks if the deck is in order, the printReverse prints the deck of cards in reverse order, and the deal function returns a card value from the end of the deque when called. The overloaded cout prints a list of the cards with commas in between. In the main function, it starts by initializing various variables, creating a CardDeck object, and shuffling the deque contained in said object. Then there is a while loop which continues as long as the play value is 1. In this while loop, the random seed is set, then it checks if the deque has less than 15 members remaining in it. If so, it deletes the deck and opens and shuffles a new one. Then two vectors are created, one for the dealer's cards, one for the player's cards, and two cards are "dealt" using the deal() function, and added to the player's cards vector. These cards are displayed, and the user is prompted to hit or stand. If they choose hit, it enters another while loop which runs and gives them cards until they choose to stand instead of hit. Then, the players and dealer's cards are displayed using a for loop, and the total card values are calculated for each. Also, the dealer's cards are drawn using a while loop which runs while the total card value is less than 17. Next, there is an if else statement to determine who won, and associated couts, along with incrementing variables for playerwins and dealerwins. Finally, the user is prompted as to whether they want to continue playing and the while loop's play value is updated appropriately.

	I was able to verify that this program was correct by running through the game and 
making sure that the outputs made sense mathematically and with respect to the rules of blackjack.